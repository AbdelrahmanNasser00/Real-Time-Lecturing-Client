{"ast":null,"code":"import { setOpenRoom, setRoomDetails, setActiveRooms, setLocalStream, setRemoteStreams, setScreenSharingStream } from \"../store/roomSlice\";\nimport * as socketConnection from \"./socketConnection\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nexport const createNewRoom = subjectId => {\n  const successCallBackFunction = () => {\n    //dispatch(setOpenRoom(true, true));\n    socketConnection.createNewRoom({\n      subjectId\n    });\n  };\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\n};\nexport const newRoomCreated = data => async dispatch => {\n  const {\n    roomDetails\n  } = data;\n  dispatch(setRoomDetails(roomDetails));\n};\nexport const updateActiveRooms = data => (dispatch, getState) => {\n  var _getState$auth$userDe;\n  const {\n    activeRooms\n  } = data;\n\n  // const friends = store.getState().friends.friends;\n  const rooms = [];\n\n  // const userId = store.getState().auth.userDetails?._id;\n  const userName = (_getState$auth$userDe = getState().auth.userDetails) === null || _getState$auth$userDe === void 0 ? void 0 : _getState$auth$userDe.username;\n  activeRooms.forEach(room => {\n    rooms.push({\n      ...room,\n      creatorUsername: userName\n    });\n  });\n  dispatch(setActiveRooms(rooms));\n};\nexport const joinRoom = roomId => async dispatch => {\n  const successCallBackFunction = () => {\n    dispatch(setRoomDetails({\n      roomId\n    }));\n    dispatch(setOpenRoom(false, true));\n    socketConnection.joinRoom({\n      roomId\n    });\n  };\n  await webRTCHandler.getLocalStreamPreview(successCallBackFunction);\n};\nexport const leaveRoom = () => (dispatch, getState) => {\n  const roomId = getState().room.roomDetails.roomId;\n  const localStream = getState().room.localStream;\n  if (localStream) {\n    localStream.getTracks().forEach(track => track.stop());\n    dispatch(setLocalStream(null));\n  }\n  const screenSharingStream = getState().room.screenSharingStream;\n  if (screenSharingStream) {\n    screenSharingStream.getTracks().forEach(track => track.stop());\n    setScreenSharingStream(null);\n  }\n  dispatch(setRemoteStreams([]));\n  webRTCHandler.closeAllConnections();\n  socketConnection.leaveRoom({\n    roomId\n  });\n  dispatch(setRoomDetails(null));\n  dispatch(setOpenRoom(false, false));\n};","map":{"version":3,"names":["setOpenRoom","setRoomDetails","setActiveRooms","setLocalStream","setRemoteStreams","setScreenSharingStream","socketConnection","webRTCHandler","createNewRoom","subjectId","successCallBackFunction","getLocalStreamPreview","newRoomCreated","data","dispatch","roomDetails","updateActiveRooms","getState","_getState$auth$userDe","activeRooms","rooms","userName","auth","userDetails","username","forEach","room","push","creatorUsername","joinRoom","roomId","leaveRoom","localStream","getTracks","track","stop","screenSharingStream","closeAllConnections"],"sources":["/media/abdelrahman/7E84C90484C8BFBF/Abdo/faculty/project/Realtime-project/client/Real-Time-Lecturing-Client/client/src/realtimeCommunication/roomHandler.js"],"sourcesContent":["import {\r\n  setOpenRoom,\r\n  setRoomDetails,\r\n  setActiveRooms,\r\n  setLocalStream,\r\n  setRemoteStreams,\r\n  setScreenSharingStream,\r\n} from \"../store/roomSlice\";\r\nimport * as socketConnection from \"./socketConnection\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\n\r\nexport const createNewRoom = (subjectId) => {\r\n  const successCallBackFunction = () => {\r\n    //dispatch(setOpenRoom(true, true));\r\n    socketConnection.createNewRoom({ subjectId });\r\n  };\r\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\r\n};\r\n\r\nexport const newRoomCreated = (data) => async (dispatch) => {\r\n  const { roomDetails } = data;\r\n  dispatch(setRoomDetails(roomDetails));\r\n};\r\n\r\nexport const updateActiveRooms = (data) => (dispatch, getState) => {\r\n  const { activeRooms } = data;\r\n\r\n  // const friends = store.getState().friends.friends;\r\n  const rooms = [];\r\n\r\n  // const userId = store.getState().auth.userDetails?._id;\r\n  const userName = getState().auth.userDetails?.username;\r\n\r\n  activeRooms.forEach((room) => {\r\n    rooms.push({ ...room, creatorUsername: userName });\r\n  });\r\n\r\n  dispatch(setActiveRooms(rooms));\r\n};\r\n\r\nexport const joinRoom = (roomId) => async (dispatch) => {\r\n  const successCallBackFunction = () => {\r\n    dispatch(setRoomDetails({ roomId }));\r\n    dispatch(setOpenRoom(false, true));\r\n    socketConnection.joinRoom({ roomId });\r\n  };\r\n  await webRTCHandler.getLocalStreamPreview(successCallBackFunction);\r\n};\r\n\r\nexport const leaveRoom = () => (dispatch, getState) => {\r\n  const roomId = getState().room.roomDetails.roomId;\r\n\r\n  const localStream = getState().room.localStream;\r\n  if (localStream) {\r\n    localStream.getTracks().forEach((track) => track.stop());\r\n    dispatch(setLocalStream(null));\r\n  }\r\n\r\n  const screenSharingStream = getState().room.screenSharingStream;\r\n  if (screenSharingStream) {\r\n    screenSharingStream.getTracks().forEach((track) => track.stop());\r\n    setScreenSharingStream(null);\r\n  }\r\n\r\n  dispatch(setRemoteStreams([]));\r\n  webRTCHandler.closeAllConnections();\r\n\r\n  socketConnection.leaveRoom({ roomId });\r\n  dispatch(setRoomDetails(null));\r\n  dispatch(setOpenRoom(false, false));\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}