{"ast":null,"code":"import io from\"socket.io-client\";import{setSubjects}from\"../store/actions/subjectsActions\";import store from\"../store/store\";import*as roomHandler from\"./roomHandler\";import*as webRTCHandler from\"./webRTCHandler\";let socket=null;export const connectWithSocketServer=userDetails=>{const jwtToken=userDetails.token;socket=io(\"http://localhost:8080\",{auth:{token:jwtToken}});socket.on(\"connect\",()=>{console.log(\"succesfully connected with socket.io server\");console.log(socket.id);});socket.on(\"subjects-list\",data=>{console.log(\"subjects came\");store.dispatch(setSubjects(data));});socket.on(\"create-room\",data=>{roomHandler.newRoomCreated(data);});socket.on(\"active-rooms\",data=>{roomHandler.updateActiveRooms(data);});socket.on(\"conn-prepare\",data=>{const{connUserSocketId}=data;webRTCHandler.prepareNewPeerConnection(connUserSocketId,false);socket.emit(\"initialze-connection\",{connUserSocketId:connUserSocketId});});socket.on(\"initialze-connection\",data=>{const{connUserSocketId}=data;webRTCHandler.prepareNewPeerConnection(connUserSocketId,true);});socket.on(\"conn-signal\",data=>{webRTCHandler.handleSignalingData(data);});socket.on(\"room-participant-left\",data=>{console.log(\"user left room\");webRTCHandler.handleParticipantLeftRoom(data);});};export const createNewRoom=()=>{socket.emit(\"create-room\");};export const joinRoom=data=>{socket.emit(\"join-room\",data);};export const leaveRoom=data=>{socket.emit(\"leave-room\",data);};export const signalPeerData=data=>{socket.emit(\"conn-signal\",data);};","map":{"version":3,"names":["io","setSubjects","store","roomHandler","webRTCHandler","socket","connectWithSocketServer","userDetails","jwtToken","token","auth","on","console","log","id","data","dispatch","newRoomCreated","updateActiveRooms","connUserSocketId","prepareNewPeerConnection","emit","handleSignalingData","handleParticipantLeftRoom","createNewRoom","joinRoom","leaveRoom","signalPeerData"],"sources":["/media/alaa-eldeen/D/Real-Time-Lecturing/Real-Time-Lecturing-Client/client/src/realtimeCommunication/socketConnection.js"],"sourcesContent":["import io from \"socket.io-client\";\r\nimport { setSubjects } from \"../store/actions/subjectsActions\";\r\nimport store from \"../store/store\";\r\nimport * as roomHandler from \"./roomHandler\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\n\r\nlet socket = null;\r\n\r\nexport const connectWithSocketServer = (userDetails) => {\r\n  const jwtToken = userDetails.token;\r\n  socket = io(\"http://localhost:8080\", {\r\n    auth: {\r\n      token: jwtToken,\r\n    },\r\n  });\r\n\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"succesfully connected with socket.io server\");\r\n    console.log(socket.id);\r\n  });\r\n\r\n  socket.on(\"subjects-list\", (data) => {\r\n    console.log(\"subjects came\");\r\n    store.dispatch(setSubjects(data));\r\n  });\r\n\r\n  socket.on(\"create-room\", (data) => {\r\n    roomHandler.newRoomCreated(data);\r\n  });\r\n\r\n  socket.on(\"active-rooms\", (data) => {\r\n    roomHandler.updateActiveRooms(data);\r\n  });\r\n\r\n  socket.on(\"conn-prepare\", (data) => {\r\n    const { connUserSocketId } = data;\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);\r\n    socket.emit(\"initialze-connection\", { connUserSocketId: connUserSocketId });\r\n  });\r\n\r\n  socket.on(\"initialze-connection\", (data) => {\r\n    const { connUserSocketId } = data;\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\r\n  });\r\n\r\n  socket.on(\"conn-signal\", (data) => {\r\n    webRTCHandler.handleSignalingData(data);\r\n  });\r\n\r\n  socket.on(\"room-participant-left\", (data) => {\r\n    console.log(\"user left room\");\r\n    webRTCHandler.handleParticipantLeftRoom(data);\r\n  });\r\n};\r\n\r\nexport const createNewRoom = () => {\r\n  socket.emit(\"create-room\");\r\n};\r\n\r\nexport const joinRoom = (data) => {\r\n  socket.emit(\"join-room\", data);\r\n};\r\n\r\nexport const leaveRoom = (data) => {\r\n  socket.emit(\"leave-room\", data);\r\n};\r\n\r\nexport const signalPeerData = (data) => {\r\n  socket.emit(\"conn-signal\", data);\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,EAAE,KAAM,kBAAkB,CACjC,OAASC,WAAW,KAAQ,kCAAkC,CAC9D,MAAO,CAAAC,KAAK,KAAM,gBAAgB,CAClC,MAAO,GAAK,CAAAC,WAAW,KAAM,eAAe,CAC5C,MAAO,GAAK,CAAAC,aAAa,KAAM,iBAAiB,CAEhD,GAAI,CAAAC,MAAM,CAAG,IAAI,CAEjB,MAAO,MAAM,CAAAC,uBAAuB,CAAIC,WAAW,EAAK,CACtD,KAAM,CAAAC,QAAQ,CAAGD,WAAW,CAACE,KAAK,CAClCJ,MAAM,CAAGL,EAAE,CAAC,uBAAuB,CAAE,CACnCU,IAAI,CAAE,CACJD,KAAK,CAAED,QACT,CACF,CAAC,CAAC,CAEFH,MAAM,CAACM,EAAE,CAAC,SAAS,CAAE,IAAM,CACzBC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC,CAC1DD,OAAO,CAACC,GAAG,CAACR,MAAM,CAACS,EAAE,CAAC,CACxB,CAAC,CAAC,CAEFT,MAAM,CAACM,EAAE,CAAC,eAAe,CAAGI,IAAI,EAAK,CACnCH,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,CAC5BX,KAAK,CAACc,QAAQ,CAACf,WAAW,CAACc,IAAI,CAAC,CAAC,CACnC,CAAC,CAAC,CAEFV,MAAM,CAACM,EAAE,CAAC,aAAa,CAAGI,IAAI,EAAK,CACjCZ,WAAW,CAACc,cAAc,CAACF,IAAI,CAAC,CAClC,CAAC,CAAC,CAEFV,MAAM,CAACM,EAAE,CAAC,cAAc,CAAGI,IAAI,EAAK,CAClCZ,WAAW,CAACe,iBAAiB,CAACH,IAAI,CAAC,CACrC,CAAC,CAAC,CAEFV,MAAM,CAACM,EAAE,CAAC,cAAc,CAAGI,IAAI,EAAK,CAClC,KAAM,CAAEI,gBAAiB,CAAC,CAAGJ,IAAI,CACjCX,aAAa,CAACgB,wBAAwB,CAACD,gBAAgB,CAAE,KAAK,CAAC,CAC/Dd,MAAM,CAACgB,IAAI,CAAC,sBAAsB,CAAE,CAAEF,gBAAgB,CAAEA,gBAAiB,CAAC,CAAC,CAC7E,CAAC,CAAC,CAEFd,MAAM,CAACM,EAAE,CAAC,sBAAsB,CAAGI,IAAI,EAAK,CAC1C,KAAM,CAAEI,gBAAiB,CAAC,CAAGJ,IAAI,CACjCX,aAAa,CAACgB,wBAAwB,CAACD,gBAAgB,CAAE,IAAI,CAAC,CAChE,CAAC,CAAC,CAEFd,MAAM,CAACM,EAAE,CAAC,aAAa,CAAGI,IAAI,EAAK,CACjCX,aAAa,CAACkB,mBAAmB,CAACP,IAAI,CAAC,CACzC,CAAC,CAAC,CAEFV,MAAM,CAACM,EAAE,CAAC,uBAAuB,CAAGI,IAAI,EAAK,CAC3CH,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAC7BT,aAAa,CAACmB,yBAAyB,CAACR,IAAI,CAAC,CAC/C,CAAC,CAAC,CACJ,CAAC,CAED,MAAO,MAAM,CAAAS,aAAa,CAAGA,CAAA,GAAM,CACjCnB,MAAM,CAACgB,IAAI,CAAC,aAAa,CAAC,CAC5B,CAAC,CAED,MAAO,MAAM,CAAAI,QAAQ,CAAIV,IAAI,EAAK,CAChCV,MAAM,CAACgB,IAAI,CAAC,WAAW,CAAEN,IAAI,CAAC,CAChC,CAAC,CAED,MAAO,MAAM,CAAAW,SAAS,CAAIX,IAAI,EAAK,CACjCV,MAAM,CAACgB,IAAI,CAAC,YAAY,CAAEN,IAAI,CAAC,CACjC,CAAC,CAED,MAAO,MAAM,CAAAY,cAAc,CAAIZ,IAAI,EAAK,CACtCV,MAAM,CAACgB,IAAI,CAAC,aAAa,CAAEN,IAAI,CAAC,CAClC,CAAC"},"metadata":{},"sourceType":"module"}