{"ast":null,"code":"import store from\"../store/store\";import{setOpenRoom,setRoomDetails,setActiveRooms,setLocalStream,setRemoteStreams,setScreenSharingStream}from\"../store/actions/roomActions\";import*as socketConnection from\"./socketConnection\";import*as webRTCHandler from\"./webRTCHandler\";export const createNewRoom=()=>{const successCallBackFunction=()=>{store.dispatch(setOpenRoom(true,true));socketConnection.createNewRoom();};webRTCHandler.getLocalStreamPreview(successCallBackFunction);};export const newRoomCreated=data=>{const{roomDetails}=data;store.dispatch(setRoomDetails(roomDetails));};export const updateActiveRooms=data=>{var _store$getState$auth$;const{activeRooms}=data;const friends=store.getState().friends.friends;const rooms=[];const userId=(_store$getState$auth$=store.getState().auth.userDetails)===null||_store$getState$auth$===void 0?void 0:_store$getState$auth$._id;activeRooms.forEach(room=>{const isRoomCreatedByMe=room.roomCreator.userId===userId;if(isRoomCreatedByMe){rooms.push({...room,creatorUsername:\"Me\"});}else{friends.forEach(f=>{if(f.id===room.roomCreator.userId){rooms.push({...room,creatorUsername:f.username});}});}});store.dispatch(setActiveRooms(rooms));};export const joinRoom=roomId=>{const successCallBackFunction=()=>{store.dispatch(setRoomDetails({roomId}));store.dispatch(setOpenRoom(false,true));socketConnection.joinRoom({roomId});};webRTCHandler.getLocalStreamPreview(successCallBackFunction);};export const leaveRoom=()=>{const roomId=store.getState().room.roomDetails.roomId;const localStream=store.getState().room.localStream;if(localStream){localStream.getTracks().forEach(track=>track.stop());store.dispatch(setLocalStream(null));}const screenSharingStream=store.getState().room.screenSharingStream;if(screenSharingStream){screenSharingStream.getTracks().forEach(track=>track.stop());store.dispatch(setScreenSharingStream(null));}store.dispatch(setRemoteStreams([]));webRTCHandler.closeAllConnections();socketConnection.leaveRoom({roomId});store.dispatch(setRoomDetails(null));store.dispatch(setOpenRoom(false,false));};","map":{"version":3,"names":["store","setOpenRoom","setRoomDetails","setActiveRooms","setLocalStream","setRemoteStreams","setScreenSharingStream","socketConnection","webRTCHandler","createNewRoom","successCallBackFunction","dispatch","getLocalStreamPreview","newRoomCreated","data","roomDetails","updateActiveRooms","_store$getState$auth$","activeRooms","friends","getState","rooms","userId","auth","userDetails","_id","forEach","room","isRoomCreatedByMe","roomCreator","push","creatorUsername","f","id","username","joinRoom","roomId","leaveRoom","localStream","getTracks","track","stop","screenSharingStream","closeAllConnections"],"sources":["/media/alaa-eldeen/D/Real-Time-Lecturing/Real-Time-Lecturing-Client/client/src/realtimeCommunication/roomHandler.js"],"sourcesContent":["import store from \"../store/store\";\r\nimport {\r\n  setOpenRoom,\r\n  setRoomDetails,\r\n  setActiveRooms,\r\n  setLocalStream,\r\n  setRemoteStreams,\r\n  setScreenSharingStream,\r\n} from \"../store/actions/roomActions\";\r\nimport * as socketConnection from \"./socketConnection\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\n\r\nexport const createNewRoom = () => {\r\n  const successCallBackFunction = () => {\r\n    store.dispatch(setOpenRoom(true, true));\r\n    socketConnection.createNewRoom();\r\n  };\r\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\r\n};\r\n\r\nexport const newRoomCreated = (data) => {\r\n  const { roomDetails } = data;\r\n  store.dispatch(setRoomDetails(roomDetails));\r\n};\r\n\r\nexport const updateActiveRooms = (data) => {\r\n  const { activeRooms } = data;\r\n\r\n  const friends = store.getState().friends.friends;\r\n  const rooms = [];\r\n\r\n  const userId = store.getState().auth.userDetails?._id;\r\n\r\n  activeRooms.forEach((room) => {\r\n    const isRoomCreatedByMe = room.roomCreator.userId === userId;\r\n\r\n    if (isRoomCreatedByMe) {\r\n      rooms.push({ ...room, creatorUsername: \"Me\" });\r\n    } else {\r\n      friends.forEach((f) => {\r\n        if (f.id === room.roomCreator.userId) {\r\n          rooms.push({ ...room, creatorUsername: f.username });\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  store.dispatch(setActiveRooms(rooms));\r\n};\r\n\r\nexport const joinRoom = (roomId) => {\r\n  const successCallBackFunction = () => {\r\n    store.dispatch(setRoomDetails({ roomId }));\r\n    store.dispatch(setOpenRoom(false, true));\r\n    socketConnection.joinRoom({ roomId });\r\n  };\r\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\r\n};\r\n\r\nexport const leaveRoom = () => {\r\n  const roomId = store.getState().room.roomDetails.roomId;\r\n\r\n  const localStream = store.getState().room.localStream;\r\n  if (localStream) {\r\n    localStream.getTracks().forEach((track) => track.stop());\r\n    store.dispatch(setLocalStream(null));\r\n  }\r\n\r\n  const screenSharingStream = store.getState().room.screenSharingStream;\r\n  if (screenSharingStream) {\r\n    screenSharingStream.getTracks().forEach((track) => track.stop());\r\n    store.dispatch(setScreenSharingStream(null));\r\n  }\r\n\r\n  store.dispatch(setRemoteStreams([]));\r\n  webRTCHandler.closeAllConnections();\r\n\r\n  socketConnection.leaveRoom({ roomId });\r\n  store.dispatch(setRoomDetails(null));\r\n  store.dispatch(setOpenRoom(false, false));\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}