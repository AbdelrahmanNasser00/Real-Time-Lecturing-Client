{"ast":null,"code":"import axios from \"axios\";\n\n// const apiClient = axios.create({\n//   baseURL: \"https://realtime-lecturing-api.onrender.com/api\",\n//   timeout: 5000,\n// });\nconst apiClient = axios.create({\n  baseURL: \"http://localhost:8080/api\",\n  timeout: 5000\n});\napiClient.interceptors.request.use(config => {\n  const userDetails = localStorage.getItem(\"user\");\n  if (userDetails) {\n    const token = JSON.parse(userDetails).token;\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, err => {\n  return Promise.reject(err);\n});\n\n// public routes\n\nexport const login = async data => {\n  try {\n    return await apiClient.post(\"/auth/login\", data);\n  } catch (exception) {\n    return {\n      error: true,\n      exception\n    };\n  }\n};\nexport const register = async data => {\n  try {\n    return await apiClient.post(\"/auth/register\", data);\n  } catch (exception) {\n    return {\n      error: true,\n      exception\n    };\n  }\n};\nexport const verify = async data => {\n  try {\n    return await apiClient.post(\"/auth/verify\", data);\n  } catch (exception) {\n    return {\n      error: true,\n      exception\n    };\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","timeout","interceptors","request","use","config","userDetails","localStorage","getItem","token","JSON","parse","headers","Authorization","err","Promise","reject","login","data","post","exception","error","register","verify"],"sources":["/home/abdelrahman/Realtime-project/client/Real-Time-Lecturing-Client/client/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// const apiClient = axios.create({\r\n//   baseURL: \"https://realtime-lecturing-api.onrender.com/api\",\r\n//   timeout: 5000,\r\n// });\r\nconst apiClient = axios.create({\r\n  baseURL: \"http://localhost:8080/api\",\r\n  timeout: 5000,\r\n});\r\n\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const userDetails = localStorage.getItem(\"user\");\r\n\r\n    if (userDetails) {\r\n      const token = JSON.parse(userDetails).token;\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    return config;\r\n  },\r\n  (err) => {\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\n// public routes\r\n\r\nexport const login = async (data) => {\r\n  try {\r\n    return await apiClient.post(\"/auth/login\", data);\r\n  } catch (exception) {\r\n    return {\r\n      error: true,\r\n      exception,\r\n    };\r\n  }\r\n};\r\n\r\nexport const register = async (data) => {\r\n  try {\r\n    return await apiClient.post(\"/auth/register\", data);\r\n  } catch (exception) {\r\n    return {\r\n      error: true,\r\n      exception,\r\n    };\r\n  }\r\n};\r\n\r\nexport const verify = async (data) => {\r\n  try {\r\n    return await apiClient.post(\"/auth/verify\", data);\r\n  } catch (exception) {\r\n    return {\r\n      error: true,\r\n      exception,\r\n    };\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAEhD,IAAIF,WAAW,EAAE;IACf,MAAMG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC,CAACG,KAAK;IAC3CJ,MAAM,CAACO,OAAO,CAACC,aAAa,GAAI,UAASJ,KAAM,EAAC;EAClD;EAEA,OAAOJ,MAAM;AACf,CAAC,EACAS,GAAG,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;AAC5B,CACF,CAAC;;AAED;;AAEA,OAAO,MAAMG,KAAK,GAAG,MAAOC,IAAI,IAAK;EACnC,IAAI;IACF,OAAO,MAAMpB,SAAS,CAACqB,IAAI,CAAC,aAAa,EAAED,IAAI,CAAC;EAClD,CAAC,CAAC,OAAOE,SAAS,EAAE;IAClB,OAAO;MACLC,KAAK,EAAE,IAAI;MACXD;IACF,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAME,QAAQ,GAAG,MAAOJ,IAAI,IAAK;EACtC,IAAI;IACF,OAAO,MAAMpB,SAAS,CAACqB,IAAI,CAAC,gBAAgB,EAAED,IAAI,CAAC;EACrD,CAAC,CAAC,OAAOE,SAAS,EAAE;IAClB,OAAO;MACLC,KAAK,EAAE,IAAI;MACXD;IACF,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMG,MAAM,GAAG,MAAOL,IAAI,IAAK;EACpC,IAAI;IACF,OAAO,MAAMpB,SAAS,CAACqB,IAAI,CAAC,cAAc,EAAED,IAAI,CAAC;EACnD,CAAC,CAAC,OAAOE,SAAS,EAAE;IAClB,OAAO;MACLC,KAAK,EAAE,IAAI;MACXD;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}