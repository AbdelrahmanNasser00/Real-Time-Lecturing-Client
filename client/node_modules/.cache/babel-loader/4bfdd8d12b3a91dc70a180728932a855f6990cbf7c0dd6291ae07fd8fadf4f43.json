{"ast":null,"code":"import io from \"socket.io-client\";\nimport * as roomHandler from \"./roomHandler\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nimport { socketOpen, socketClose } from \"../store/socketSlice\";\nimport { setSubjects } from \"../store/subjectsSlice\";\nimport { setMessages } from \"../store/chatSlice\";\nimport { newRoomCreated, updateActiveRooms } from \"./roomHandler\";\nimport { handleParticipantLeftRoom, handleSignalingData, prepareNewPeerConnection } from \"./webRTCHandler\";\nlet socket = null;\nexport const connectWithSocketServer = (userDetails, dispatch) => {\n  const jwtToken = userDetails.token;\n  console.log(`jwtToken ${jwtToken}`);\n  // socket = io(\"https://realtime-lecturing-api.onrender.com\", {\n  //   auth: {\n  //     token: jwtToken,\n  //   },\n  // });\n  socket = io(\"http://localhost:8080\", {\n    auth: {\n      token: jwtToken\n    }\n  });\n  socket.on(\"connect\", () => {\n    console.log(\"succesfully connected with socket.io server\");\n    dispatch(socketOpen());\n  });\n  socket.on(\"subjects-list\", data => {\n    const {\n      subjects\n    } = data;\n    dispatch(setSubjects(subjects));\n  });\n  socket.on(\"create-room\", data => {\n    console.log(\"Room details: \", data);\n    dispatch(newRoomCreated(data));\n  });\n  socket.on(\"active-rooms\", data => {\n    dispatch(updateActiveRooms(data));\n  });\n  socket.on(\"conn-prepare\", data => {\n    const {\n      connUserSocketId\n    } = data;\n    dispatch(prepareNewPeerConnection(connUserSocketId, false));\n    socket.emit(\"initialze-connection\", {\n      connUserSocketId: connUserSocketId\n    });\n  });\n  socket.on(\"initialze-connection\", data => {\n    const {\n      connUserSocketId\n    } = data;\n    dispatch(prepareNewPeerConnection(connUserSocketId, true));\n  });\n  socket.on(\"conn-signal\", data => {\n    dispatch(handleSignalingData(data));\n  });\n  socket.on(\"room-participant-left\", data => {\n    console.log(\"user left room\");\n    dispatch(handleParticipantLeftRoom(data));\n  });\n  socket.on(\"receive-message\", data => {\n    dispatch(setMessages(data));\n  });\n  socket.on(\"load-messages\", data => {\n    data.forEach(message => {\n      dispatch(setMessages(message));\n    });\n  });\n  socket.on(\"disconnect\", () => {\n    dispatch(socketClose());\n  });\n};\nexport const createNewRoom = data => {\n  socket.emit(\"create-room\", data);\n};\nexport const joinRoom = data => {\n  socket.emit(\"join-room\", data);\n};\nexport const leaveRoom = data => {\n  socket.emit(\"leave-room\", data);\n};\nexport const signalPeerData = data => {\n  socket.emit(\"conn-signal\", data);\n};\nexport const sendMessage = data => {\n  socket.emit(\"send-message\", data);\n};","map":{"version":3,"names":["io","roomHandler","webRTCHandler","socketOpen","socketClose","setSubjects","setMessages","newRoomCreated","updateActiveRooms","handleParticipantLeftRoom","handleSignalingData","prepareNewPeerConnection","socket","connectWithSocketServer","userDetails","dispatch","jwtToken","token","console","log","auth","on","data","subjects","connUserSocketId","emit","forEach","message","createNewRoom","joinRoom","leaveRoom","signalPeerData","sendMessage"],"sources":["/home/abdelrahman/Realtime-project/client/Real-Time-Lecturing-Client/client/src/realtimeCommunication/socketConnection.js"],"sourcesContent":["import io from \"socket.io-client\";\r\nimport * as roomHandler from \"./roomHandler\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\nimport { socketOpen, socketClose } from \"../store/socketSlice\";\r\nimport { setSubjects } from \"../store/subjectsSlice\";\r\nimport { setMessages } from \"../store/chatSlice\";\r\nimport { newRoomCreated, updateActiveRooms } from \"./roomHandler\";\r\nimport {\r\n  handleParticipantLeftRoom,\r\n  handleSignalingData,\r\n  prepareNewPeerConnection,\r\n} from \"./webRTCHandler\";\r\nlet socket = null;\r\n\r\nexport const connectWithSocketServer = (userDetails, dispatch) => {\r\n  const jwtToken = userDetails.token;\r\n  console.log(`jwtToken ${jwtToken}`);\r\n  // socket = io(\"https://realtime-lecturing-api.onrender.com\", {\r\n  //   auth: {\r\n  //     token: jwtToken,\r\n  //   },\r\n  // });\r\n  socket = io(\"http://localhost:8080\", {\r\n    auth: {\r\n      token: jwtToken,\r\n    },\r\n  });\r\n\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"succesfully connected with socket.io server\");\r\n    dispatch(socketOpen());\r\n  });\r\n\r\n  socket.on(\"subjects-list\", (data) => {\r\n    const { subjects } = data;\r\n    dispatch(setSubjects(subjects));\r\n  });\r\n\r\n  socket.on(\"create-room\", (data) => {\r\n    console.log(\"Room details: \", data);\r\n    dispatch(newRoomCreated(data));\r\n  });\r\n\r\n  socket.on(\"active-rooms\", (data) => {\r\n    dispatch(updateActiveRooms(data));\r\n  });\r\n\r\n  socket.on(\"conn-prepare\", (data) => {\r\n    const { connUserSocketId } = data;\r\n    dispatch(prepareNewPeerConnection(connUserSocketId, false));\r\n    socket.emit(\"initialze-connection\", { connUserSocketId: connUserSocketId });\r\n  });\r\n\r\n  socket.on(\"initialze-connection\", (data) => {\r\n    const { connUserSocketId } = data;\r\n    dispatch(prepareNewPeerConnection(connUserSocketId, true));\r\n  });\r\n\r\n  socket.on(\"conn-signal\", (data) => {\r\n    dispatch(handleSignalingData(data));\r\n  });\r\n\r\n  socket.on(\"room-participant-left\", (data) => {\r\n    console.log(\"user left room\");\r\n    dispatch(handleParticipantLeftRoom(data));\r\n  });\r\n\r\n  socket.on(\"receive-message\", (data) => {\r\n    dispatch(setMessages(data));\r\n  });\r\n\r\n  socket.on(\"load-messages\", (data) => {\r\n    data.forEach((message) => {\r\n      dispatch(setMessages(message));\r\n    });\r\n  });\r\n\r\n  socket.on(\"disconnect\", () => {\r\n    dispatch(socketClose());\r\n  });\r\n};\r\n\r\nexport const createNewRoom = (data) => {\r\n  socket.emit(\"create-room\", data);\r\n};\r\n\r\nexport const joinRoom = (data) => {\r\n  socket.emit(\"join-room\", data);\r\n};\r\n\r\nexport const leaveRoom = (data) => {\r\n  socket.emit(\"leave-room\", data);\r\n};\r\n\r\nexport const signalPeerData = (data) => {\r\n  socket.emit(\"conn-signal\", data);\r\n};\r\n\r\nexport const sendMessage = (data) => {\r\n  socket.emit(\"send-message\", data);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}