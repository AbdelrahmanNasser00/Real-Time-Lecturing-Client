{"ast":null,"code":"import store from \"../store/store\";\nimport { setOpenRoom, setRoomDetails, setActiveRooms, setLocalStream, setRemoteStreams, setScreenSharingStream } from \"../store/roomSlice\";\nimport * as socketConnection from \"./socketConnection\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nexport const createNewRoom = subjectId => dispatch => {\n  const successCallBackFunction = () => {\n    dispatch(setOpenRoom(true, true));\n    socketConnection.createNewRoom({\n      subjectId\n    });\n  };\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\n};\nexport const newRoomCreated = (data, dispatch) => {\n  const {\n    roomDetails\n  } = data;\n  dispatch(setRoomDetails(roomDetails));\n};\nexport const updateActiveRooms = data => dispatch => {\n  var _store$getState$auth$;\n  const {\n    activeRooms\n  } = data;\n\n  // const friends = store.getState().friends.friends;\n  const rooms = [];\n\n  // const userId = store.getState().auth.userDetails?._id;\n  const userName = (_store$getState$auth$ = store.getState().auth.userDetails) === null || _store$getState$auth$ === void 0 ? void 0 : _store$getState$auth$.username;\n  activeRooms.forEach(room => {\n    rooms.push({\n      ...room,\n      creatorUsername: userName\n    });\n  });\n  dispatch(setActiveRooms(rooms));\n};\nexport const joinRoom = (roomId, dispatch) => {\n  const successCallBackFunction = () => {\n    dispatch(setRoomDetails({\n      roomId\n    }));\n    dispatch(setOpenRoom(false, true));\n    socketConnection.joinRoom({\n      roomId\n    });\n  };\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\n};\nexport const leaveRoom = dispatch => {\n  const roomId = store.getState().room.roomDetails.roomId;\n  const localStream = store.getState().room.localStream;\n  if (localStream) {\n    localStream.getTracks().forEach(track => track.stop());\n    dispatch(setLocalStream(null));\n  }\n  const screenSharingStream = store.getState().room.screenSharingStream;\n  if (screenSharingStream) {\n    screenSharingStream.getTracks().forEach(track => track.stop());\n    dispatch(setScreenSharingStream(null));\n  }\n  dispatch(setRemoteStreams([]));\n  webRTCHandler.closeAllConnections();\n  socketConnection.leaveRoom({\n    roomId\n  });\n  dispatch(setRoomDetails(null));\n  dispatch(setOpenRoom(false, false));\n};","map":{"version":3,"names":["store","setOpenRoom","setRoomDetails","setActiveRooms","setLocalStream","setRemoteStreams","setScreenSharingStream","socketConnection","webRTCHandler","createNewRoom","subjectId","dispatch","successCallBackFunction","getLocalStreamPreview","newRoomCreated","data","roomDetails","updateActiveRooms","_store$getState$auth$","activeRooms","rooms","userName","getState","auth","userDetails","username","forEach","room","push","creatorUsername","joinRoom","roomId","leaveRoom","localStream","getTracks","track","stop","screenSharingStream","closeAllConnections"],"sources":["/home/abdelrahman/Documents/Realtime-project/client/Real-Time-Lecturing-Client/client/src/realtimeCommunication/roomHandler.js"],"sourcesContent":["import store from \"../store/store\";\r\nimport {\r\n  setOpenRoom,\r\n  setRoomDetails,\r\n  setActiveRooms,\r\n  setLocalStream,\r\n  setRemoteStreams,\r\n  setScreenSharingStream,\r\n} from \"../store/roomSlice\";\r\nimport * as socketConnection from \"./socketConnection\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\n\r\nexport const createNewRoom = (subjectId) => (dispatch) => {\r\n  const successCallBackFunction = () => {\r\n    dispatch(setOpenRoom(true, true));\r\n    socketConnection.createNewRoom({ subjectId });\r\n  };\r\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\r\n};\r\n\r\nexport const newRoomCreated = (data, dispatch) => {\r\n  const { roomDetails } = data;\r\n  dispatch(setRoomDetails(roomDetails));\r\n};\r\n\r\nexport const updateActiveRooms = (data) => (dispatch) => {\r\n  const { activeRooms } = data;\r\n\r\n  // const friends = store.getState().friends.friends;\r\n  const rooms = [];\r\n\r\n  // const userId = store.getState().auth.userDetails?._id;\r\n  const userName = store.getState().auth.userDetails?.username;\r\n\r\n  activeRooms.forEach((room) => {\r\n    rooms.push({ ...room, creatorUsername: userName });\r\n  });\r\n\r\n  dispatch(setActiveRooms(rooms));\r\n};\r\n\r\nexport const joinRoom = (roomId, dispatch) => {\r\n  const successCallBackFunction = () => {\r\n    dispatch(setRoomDetails({ roomId }));\r\n    dispatch(setOpenRoom(false, true));\r\n    socketConnection.joinRoom({ roomId });\r\n  };\r\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\r\n};\r\n\r\nexport const leaveRoom = (dispatch) => {\r\n  const roomId = store.getState().room.roomDetails.roomId;\r\n\r\n  const localStream = store.getState().room.localStream;\r\n  if (localStream) {\r\n    localStream.getTracks().forEach((track) => track.stop());\r\n    dispatch(setLocalStream(null));\r\n  }\r\n\r\n  const screenSharingStream = store.getState().room.screenSharingStream;\r\n  if (screenSharingStream) {\r\n    screenSharingStream.getTracks().forEach((track) => track.stop());\r\n    dispatch(setScreenSharingStream(null));\r\n  }\r\n\r\n  dispatch(setRemoteStreams([]));\r\n  webRTCHandler.closeAllConnections();\r\n\r\n  socketConnection.leaveRoom({ roomId });\r\n  dispatch(setRoomDetails(null));\r\n  dispatch(setOpenRoom(false, false));\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}