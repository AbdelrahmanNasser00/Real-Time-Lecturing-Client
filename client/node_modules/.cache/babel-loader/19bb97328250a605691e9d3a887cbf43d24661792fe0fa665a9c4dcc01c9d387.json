{"ast":null,"code":"import { setLocalStream, setRemoteStreams } from \"../store/roomSlice\";\nimport Peer from \"simple-peer\";\nimport * as socketConnection from \"./socketConnection\";\nimport { useSelector } from \"react-redux\";\nconst getConfiguration = () => {\n  const turnIceServers = null;\n  if (turnIceServers) {\n    // TODO use TURN server credentials\n  } else {\n    console.warn(\"Using only STUN server\");\n    return {\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    };\n  }\n};\nexport const getLocalStreamPreview = callbackFunc => dispatch => {\n  const constraints = {\n    video: true,\n    audio: true\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n    dispatch(setLocalStream(stream));\n    callbackFunc();\n  }).catch(err => {\n    console.log(\"Cannot get an access to local stream\");\n    console.log(err);\n  });\n};\nlet peers = {};\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {\n  var _s = $RefreshSig$();\n  return _s(dispatch => {\n    _s();\n    const localStream = useSelector(state => state.room.localStream);\n    if (isInitiator) {\n      console.log(\"preparing new peer connection as initiator\");\n    } else {\n      console.log(\"preparing new peer connection as not initiator\");\n    }\n    peers[connUserSocketId] = new Peer({\n      initiator: isInitiator,\n      config: getConfiguration(),\n      stream: localStream\n    });\n    peers[connUserSocketId].on(\"signal\", data => {\n      const signalData = {\n        signal: data,\n        connUserSocketId: connUserSocketId\n      };\n      socketConnection.signalPeerData(signalData);\n    });\n    peers[connUserSocketId].on(\"stream\", remoteStream => {\n      // TODO\n      // add new remote stream to our server store\n      console.log(\"remote stream came from other user\");\n      console.log(\"direct connection has been established\");\n      remoteStream.connUserSocketId = connUserSocketId;\n      dispatch(addNewRemoteStream(remoteStream));\n    });\n  }, \"U1agj2PBBHWMaZnvSqBgyjhThj8=\", false, function () {\n    return [useSelector];\n  });\n};\nexport const handleSignalingData = data => {\n  const {\n    connUserSocketId,\n    signal\n  } = data;\n  if (peers[connUserSocketId]) {\n    peers[connUserSocketId].signal(signal);\n  }\n};\nconst addNewRemoteStream = remoteStream => {\n  var _s2 = $RefreshSig$();\n  return _s2((dispatch, getState) => {\n    _s2();\n    const remoteStreams = useSelector(state => state.room.remoteStreams);\n    const newRemoteStreams = [...remoteStreams, remoteStream];\n    dispatch(setRemoteStreams(newRemoteStreams));\n  }, \"T6Az1IvkoP78d5GwvSB6/f3bli8=\", false, function () {\n    return [useSelector];\n  });\n};\nexport const closeAllConnections = dispatch => {\n  Object.entries(peers).forEach(mappedObject => {\n    const connUserSocketId = mappedObject[0];\n    if (peers[connUserSocketId]) {\n      peers[connUserSocketId].destroy();\n      delete peers[connUserSocketId];\n    }\n  });\n};\nexport const handleParticipantLeftRoom = data => {\n  var _s3 = $RefreshSig$();\n  return _s3((dispatch, getState) => {\n    _s3();\n    const {\n      connUserSocketId\n    } = data;\n    if (peers[connUserSocketId]) {\n      peers[connUserSocketId].destroy();\n      delete peers[connUserSocketId];\n    }\n    const remoteStreams = useSelector(state => state.room.remoteStreams);\n    const newRemoteStreams = remoteStreams.filter(remoteStream => remoteStream.connUserSocketId !== connUserSocketId);\n    dispatch(setRemoteStreams(newRemoteStreams));\n  }, \"T6Az1IvkoP78d5GwvSB6/f3bli8=\", false, function () {\n    return [useSelector];\n  });\n};\nexport const switchOutgoingTracks = stream => {\n  for (let socket_id in peers) {\n    for (let index in peers[socket_id].streams[0].getTracks()) {\n      for (let index2 in stream.getTracks()) {\n        if (peers[socket_id].streams[0].getTracks()[index].kind === stream.getTracks()[index2].kind) {\n          peers[socket_id].replaceTrack(peers[socket_id].streams[0].getTracks()[index], stream.getTracks()[index2], peers[socket_id].streams[0]);\n          break;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["setLocalStream","setRemoteStreams","Peer","socketConnection","useSelector","getConfiguration","turnIceServers","console","warn","iceServers","urls","getLocalStreamPreview","callbackFunc","dispatch","constraints","video","audio","navigator","mediaDevices","getUserMedia","then","stream","catch","err","log","peers","prepareNewPeerConnection","connUserSocketId","isInitiator","_s","$RefreshSig$","localStream","state","room","initiator","config","on","data","signalData","signal","signalPeerData","remoteStream","addNewRemoteStream","handleSignalingData","_s2","getState","remoteStreams","newRemoteStreams","closeAllConnections","Object","entries","forEach","mappedObject","destroy","handleParticipantLeftRoom","_s3","filter","switchOutgoingTracks","socket_id","index","streams","getTracks","index2","kind","replaceTrack"],"sources":["/home/abdelrahman/Realtime-project/client/Real-Time-Lecturing-Client/client/src/realtimeCommunication/webRTCHandler.js"],"sourcesContent":["import { setLocalStream, setRemoteStreams } from \"../store/roomSlice\";\r\nimport Peer from \"simple-peer\";\r\nimport * as socketConnection from \"./socketConnection\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst getConfiguration = () => {\r\n  const turnIceServers = null;\r\n\r\n  if (turnIceServers) {\r\n    // TODO use TURN server credentials\r\n  } else {\r\n    console.warn(\"Using only STUN server\");\r\n    return {\r\n      iceServers: [\r\n        {\r\n          urls: \"stun:stun.l.google.com:19302\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n};\r\n\r\nexport const getLocalStreamPreview = (callbackFunc) => (dispatch) => {\r\n  const constraints = {\r\n    video: true,\r\n    audio: true,\r\n  };\r\n\r\n  navigator.mediaDevices\r\n    .getUserMedia(constraints)\r\n    .then((stream) => {\r\n      dispatch(setLocalStream(stream));\r\n      callbackFunc();\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Cannot get an access to local stream\");\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nlet peers = {};\r\n\r\nexport const prepareNewPeerConnection =\r\n  (connUserSocketId, isInitiator) => (dispatch) => {\r\n    const localStream = useSelector((state) => state.room.localStream);\r\n\r\n    if (isInitiator) {\r\n      console.log(\"preparing new peer connection as initiator\");\r\n    } else {\r\n      console.log(\"preparing new peer connection as not initiator\");\r\n    }\r\n\r\n    peers[connUserSocketId] = new Peer({\r\n      initiator: isInitiator,\r\n      config: getConfiguration(),\r\n      stream: localStream,\r\n    });\r\n\r\n    peers[connUserSocketId].on(\"signal\", (data) => {\r\n      const signalData = {\r\n        signal: data,\r\n        connUserSocketId: connUserSocketId,\r\n      };\r\n\r\n      socketConnection.signalPeerData(signalData);\r\n    });\r\n\r\n    peers[connUserSocketId].on(\"stream\", (remoteStream) => {\r\n      // TODO\r\n      // add new remote stream to our server store\r\n      console.log(\"remote stream came from other user\");\r\n      console.log(\"direct connection has been established\");\r\n      remoteStream.connUserSocketId = connUserSocketId;\r\n      dispatch(addNewRemoteStream(remoteStream));\r\n    });\r\n  };\r\n\r\nexport const handleSignalingData = (data) => {\r\n  const { connUserSocketId, signal } = data;\r\n\r\n  if (peers[connUserSocketId]) {\r\n    peers[connUserSocketId].signal(signal);\r\n  }\r\n};\r\n\r\nconst addNewRemoteStream = (remoteStream) => (dispatch, getState) => {\r\n  const remoteStreams = useSelector((state) => state.room.remoteStreams);\r\n  const newRemoteStreams = [...remoteStreams, remoteStream];\r\n\r\n  dispatch(setRemoteStreams(newRemoteStreams));\r\n};\r\n\r\nexport const closeAllConnections = (dispatch) => {\r\n  Object.entries(peers).forEach((mappedObject) => {\r\n    const connUserSocketId = mappedObject[0];\r\n    if (peers[connUserSocketId]) {\r\n      peers[connUserSocketId].destroy();\r\n      delete peers[connUserSocketId];\r\n    }\r\n  });\r\n};\r\n\r\nexport const handleParticipantLeftRoom = (data) => (dispatch, getState) => {\r\n  const { connUserSocketId } = data;\r\n\r\n  if (peers[connUserSocketId]) {\r\n    peers[connUserSocketId].destroy();\r\n    delete peers[connUserSocketId];\r\n  }\r\n\r\n  const remoteStreams = useSelector((state) => state.room.remoteStreams);\r\n\r\n  const newRemoteStreams = remoteStreams.filter(\r\n    (remoteStream) => remoteStream.connUserSocketId !== connUserSocketId\r\n  );\r\n\r\n  dispatch(setRemoteStreams(newRemoteStreams));\r\n};\r\n\r\nexport const switchOutgoingTracks = (stream) => {\r\n  for (let socket_id in peers) {\r\n    for (let index in peers[socket_id].streams[0].getTracks()) {\r\n      for (let index2 in stream.getTracks()) {\r\n        if (\r\n          peers[socket_id].streams[0].getTracks()[index].kind ===\r\n          stream.getTracks()[index2].kind\r\n        ) {\r\n          peers[socket_id].replaceTrack(\r\n            peers[socket_id].streams[0].getTracks()[index],\r\n            stream.getTracks()[index2],\r\n            peers[socket_id].streams[0]\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}