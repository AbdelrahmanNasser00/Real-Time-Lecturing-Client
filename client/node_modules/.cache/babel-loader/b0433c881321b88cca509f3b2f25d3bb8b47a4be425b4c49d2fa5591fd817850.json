{"ast":null,"code":"import { setLocalStreamId, setRemoteStreams } from \"../store/roomSlice\";\nimport Peer from \"simple-peer\";\nimport * as socketConnection from \"./socketConnection\";\nconst getConfiguration = () => {\n  const turnIceServers = null;\n  if (turnIceServers) {\n    // TODO use TURN server credentials\n  } else {\n    console.warn(\"Using only STUN server\");\n    return {\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    };\n  }\n};\nexport const getLocalStreamPreview = callbackFunc => dispatch => {\n  const constraints = {\n    video: true,\n    audio: true\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n    console.log(\"stream\", stream);\n    dispatch(setLocalStreamId(stream.id));\n    callbackFunc();\n  }).catch(err => {\n    console.log(\"Cannot get an access to local stream\");\n    console.log(err);\n  });\n};\nlet peers = {};\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => (dispatch, getState) => {\n  const localStream = getState().room.localStream;\n  if (isInitiator) {\n    console.log(\"preparing new peer connection as initiator\");\n  } else {\n    console.log(\"preparing new peer connection as not initiator\");\n  }\n  peers[connUserSocketId] = new Peer({\n    initiator: isInitiator,\n    config: getConfiguration(),\n    stream: localStream\n  });\n  peers[connUserSocketId].on(\"signal\", data => {\n    const signalData = {\n      signal: data,\n      connUserSocketId: connUserSocketId\n    };\n    socketConnection.signalPeerData(signalData);\n  });\n  peers[connUserSocketId].on(\"stream\", remoteStream => {\n    // TODO\n    // add new remote stream to our server store\n    console.log(\"remote stream came from other user\");\n    console.log(\"direct connection has been established\");\n    remoteStream.connUserSocketId = connUserSocketId;\n    dispatch(addNewRemoteStream(remoteStream));\n  });\n};\nexport const handleSignalingData = data => {\n  const {\n    connUserSocketId,\n    signal\n  } = data;\n  if (peers[connUserSocketId]) {\n    peers[connUserSocketId].signal(signal);\n  }\n};\nconst addNewRemoteStream = remoteStream => (dispatch, getState) => {\n  const remoteStreams = getState().room.remoteStreams;\n  const newRemoteStreams = [...remoteStreams, remoteStream];\n  dispatch(setRemoteStreams(newRemoteStreams));\n};\nexport const closeAllConnections = () => {\n  Object.entries(peers).forEach(mappedObject => {\n    const connUserSocketId = mappedObject[0];\n    if (peers[connUserSocketId]) {\n      peers[connUserSocketId].destroy();\n      delete peers[connUserSocketId];\n    }\n  });\n};\nexport const handleParticipantLeftRoom = data => (dispatch, getState) => {\n  const {\n    connUserSocketId\n  } = data;\n  if (peers[connUserSocketId]) {\n    peers[connUserSocketId].destroy();\n    delete peers[connUserSocketId];\n  }\n  const remoteStreams = getState().room.remoteStreams;\n  const newRemoteStreams = remoteStreams.filter(remoteStream => remoteStream.connUserSocketId !== connUserSocketId);\n  dispatch(setRemoteStreams(newRemoteStreams));\n};\nexport const switchOutgoingTracks = stream => {\n  for (let socket_id in peers) {\n    for (let index in peers[socket_id].streams[0].getTracks()) {\n      for (let index2 in stream.getTracks()) {\n        if (peers[socket_id].streams[0].getTracks()[index].kind === stream.getTracks()[index2].kind) {\n          peers[socket_id].replaceTrack(peers[socket_id].streams[0].getTracks()[index], stream.getTracks()[index2], peers[socket_id].streams[0]);\n          break;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["setLocalStreamId","setRemoteStreams","Peer","socketConnection","getConfiguration","turnIceServers","console","warn","iceServers","urls","getLocalStreamPreview","callbackFunc","dispatch","constraints","video","audio","navigator","mediaDevices","getUserMedia","then","stream","log","id","catch","err","peers","prepareNewPeerConnection","connUserSocketId","isInitiator","getState","localStream","room","initiator","config","on","data","signalData","signal","signalPeerData","remoteStream","addNewRemoteStream","handleSignalingData","remoteStreams","newRemoteStreams","closeAllConnections","Object","entries","forEach","mappedObject","destroy","handleParticipantLeftRoom","filter","switchOutgoingTracks","socket_id","index","streams","getTracks","index2","kind","replaceTrack"],"sources":["/media/abdelrahman/7E84C90484C8BFBF/Abdo/faculty/project/Realtime-project/client/Real-Time-Lecturing-Client/client/src/realtimeCommunication/webRTCHandler.js"],"sourcesContent":["import { setLocalStreamId, setRemoteStreams } from \"../store/roomSlice\";\r\nimport Peer from \"simple-peer\";\r\nimport * as socketConnection from \"./socketConnection\";\r\n\r\nconst getConfiguration = () => {\r\n  const turnIceServers = null;\r\n\r\n  if (turnIceServers) {\r\n    // TODO use TURN server credentials\r\n  } else {\r\n    console.warn(\"Using only STUN server\");\r\n    return {\r\n      iceServers: [\r\n        {\r\n          urls: \"stun:stun.l.google.com:19302\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n};\r\n\r\nexport const getLocalStreamPreview = (callbackFunc) => (dispatch) => {\r\n  const constraints = {\r\n    video: true,\r\n    audio: true,\r\n  };\r\n\r\n  navigator.mediaDevices\r\n    .getUserMedia(constraints)\r\n    .then((stream) => {\r\n      console.log(\"stream\", stream);\r\n      dispatch(setLocalStreamId(stream.id));\r\n      callbackFunc();\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"Cannot get an access to local stream\");\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nlet peers = {};\r\n\r\nexport const prepareNewPeerConnection =\r\n  (connUserSocketId, isInitiator) => (dispatch, getState) => {\r\n    const localStream = getState().room.localStream;\r\n\r\n    if (isInitiator) {\r\n      console.log(\"preparing new peer connection as initiator\");\r\n    } else {\r\n      console.log(\"preparing new peer connection as not initiator\");\r\n    }\r\n\r\n    peers[connUserSocketId] = new Peer({\r\n      initiator: isInitiator,\r\n      config: getConfiguration(),\r\n      stream: localStream,\r\n    });\r\n\r\n    peers[connUserSocketId].on(\"signal\", (data) => {\r\n      const signalData = {\r\n        signal: data,\r\n        connUserSocketId: connUserSocketId,\r\n      };\r\n\r\n      socketConnection.signalPeerData(signalData);\r\n    });\r\n\r\n    peers[connUserSocketId].on(\"stream\", (remoteStream) => {\r\n      // TODO\r\n      // add new remote stream to our server store\r\n      console.log(\"remote stream came from other user\");\r\n      console.log(\"direct connection has been established\");\r\n      remoteStream.connUserSocketId = connUserSocketId;\r\n      dispatch(addNewRemoteStream(remoteStream));\r\n    });\r\n  };\r\n\r\nexport const handleSignalingData = (data) => {\r\n  const { connUserSocketId, signal } = data;\r\n\r\n  if (peers[connUserSocketId]) {\r\n    peers[connUserSocketId].signal(signal);\r\n  }\r\n};\r\n\r\nconst addNewRemoteStream = (remoteStream) => (dispatch, getState) => {\r\n  const remoteStreams = getState().room.remoteStreams;\r\n  const newRemoteStreams = [...remoteStreams, remoteStream];\r\n\r\n  dispatch(setRemoteStreams(newRemoteStreams));\r\n};\r\n\r\nexport const closeAllConnections = () => {\r\n  Object.entries(peers).forEach((mappedObject) => {\r\n    const connUserSocketId = mappedObject[0];\r\n    if (peers[connUserSocketId]) {\r\n      peers[connUserSocketId].destroy();\r\n      delete peers[connUserSocketId];\r\n    }\r\n  });\r\n};\r\n\r\nexport const handleParticipantLeftRoom = (data) => (dispatch, getState) => {\r\n  const { connUserSocketId } = data;\r\n\r\n  if (peers[connUserSocketId]) {\r\n    peers[connUserSocketId].destroy();\r\n    delete peers[connUserSocketId];\r\n  }\r\n\r\n  const remoteStreams = getState().room.remoteStreams;\r\n\r\n  const newRemoteStreams = remoteStreams.filter(\r\n    (remoteStream) => remoteStream.connUserSocketId !== connUserSocketId\r\n  );\r\n\r\n  dispatch(setRemoteStreams(newRemoteStreams));\r\n};\r\n\r\nexport const switchOutgoingTracks = (stream) => {\r\n  for (let socket_id in peers) {\r\n    for (let index in peers[socket_id].streams[0].getTracks()) {\r\n      for (let index2 in stream.getTracks()) {\r\n        if (\r\n          peers[socket_id].streams[0].getTracks()[index].kind ===\r\n          stream.getTracks()[index2].kind\r\n        ) {\r\n          peers[socket_id].replaceTrack(\r\n            peers[socket_id].streams[0].getTracks()[index],\r\n            stream.getTracks()[index2],\r\n            peers[socket_id].streams[0]\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}