{"ast":null,"code":"import { setOpenRoom, setRoomDetails, setActiveRooms, setLocalStream, setRemoteStreams, setScreenSharingStream } from \"../store/roomSlice\";\nimport * as socketConnection from \"./socketConnection\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nexport const createNewRoom = subjectId => async dispatch => {\n  const successCallBackFunction = () => {\n    dispatch(setOpenRoom(true, true));\n    socketConnection.createNewRoom({\n      subjectId\n    });\n  };\n  await webRTCHandler.getLocalStreamPreview(successCallBackFunction);\n};\nexport const newRoomCreated = data => dispatch => {\n  const {\n    roomDetails\n  } = data;\n  dispatch(setRoomDetails(roomDetails));\n};\nexport const updateActiveRooms = data => (dispatch, getState) => {\n  var _getState$auth$userDe;\n  const {\n    activeRooms\n  } = data;\n  const userName = (_getState$auth$userDe = getState().auth.userDetails) === null || _getState$auth$userDe === void 0 ? void 0 : _getState$auth$userDe.username;\n  const rooms = activeRooms.map(room => ({\n    ...room,\n    creatorUsername: userName\n  }));\n  dispatch(setActiveRooms(rooms));\n};\nexport const joinRoom = roomId => async dispatch => {\n  const successCallBackFunction = () => {\n    dispatch(setRoomDetails({\n      roomId\n    }));\n    dispatch(setOpenRoom(false, true));\n    socketConnection.joinRoom({\n      roomId\n    });\n  };\n  await webRTCHandler.getLocalStreamPreview(successCallBackFunction);\n};\nexport const leaveRoom = () => (dispatch, getState) => {\n  const roomId = getState().room.roomDetails.roomId;\n  const localStream = getState().room.localStream;\n  if (localStream) {\n    localStream.getTracks().forEach(track => track.stop());\n    dispatch(setLocalStream(null));\n  }\n  const screenSharingStream = getState().room.screenSharingStream;\n  if (screenSharingStream) {\n    screenSharingStream.getTracks().forEach(track => track.stop());\n    dispatch(setScreenSharingStream(null));\n  }\n  dispatch(setRemoteStreams([]));\n  webRTCHandler.closeAllConnections();\n  socketConnection.leaveRoom({\n    roomId\n  });\n  dispatch(setRoomDetails(null));\n  dispatch(setOpenRoom(false, false));\n};","map":{"version":3,"names":["setOpenRoom","setRoomDetails","setActiveRooms","setLocalStream","setRemoteStreams","setScreenSharingStream","socketConnection","webRTCHandler","createNewRoom","subjectId","dispatch","successCallBackFunction","getLocalStreamPreview","newRoomCreated","data","roomDetails","updateActiveRooms","getState","_getState$auth$userDe","activeRooms","userName","auth","userDetails","username","rooms","map","room","creatorUsername","joinRoom","roomId","leaveRoom","localStream","getTracks","forEach","track","stop","screenSharingStream","closeAllConnections"],"sources":["/home/abdelrahman/Documents/Realtime-project/client/Real-Time-Lecturing-Client/client/src/realtimeCommunication/roomHandler.js"],"sourcesContent":["import {\r\n  setOpenRoom,\r\n  setRoomDetails,\r\n  setActiveRooms,\r\n  setLocalStream,\r\n  setRemoteStreams,\r\n  setScreenSharingStream,\r\n} from \"../store/roomSlice\";\r\nimport * as socketConnection from \"./socketConnection\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\n\r\nexport const createNewRoom = (subjectId) => async (dispatch) => {\r\n  const successCallBackFunction = () => {\r\n    dispatch(setOpenRoom(true, true));\r\n    socketConnection.createNewRoom({ subjectId });\r\n  };\r\n  await webRTCHandler.getLocalStreamPreview(successCallBackFunction);\r\n};\r\n\r\nexport const newRoomCreated = (data) => (dispatch) => {\r\n  const { roomDetails } = data;\r\n  dispatch(setRoomDetails(roomDetails));\r\n};\r\n\r\nexport const updateActiveRooms = (data) => (dispatch, getState) => {\r\n  const { activeRooms } = data;\r\n  const userName = getState().auth.userDetails?.username;\r\n  const rooms = activeRooms.map((room) => ({\r\n    ...room,\r\n    creatorUsername: userName,\r\n  }));\r\n  dispatch(setActiveRooms(rooms));\r\n};\r\n\r\nexport const joinRoom = (roomId) => async (dispatch) => {\r\n  const successCallBackFunction = () => {\r\n    dispatch(setRoomDetails({ roomId }));\r\n    dispatch(setOpenRoom(false, true));\r\n    socketConnection.joinRoom({ roomId });\r\n  };\r\n  await webRTCHandler.getLocalStreamPreview(successCallBackFunction);\r\n};\r\n\r\nexport const leaveRoom = () => (dispatch, getState) => {\r\n  const roomId = getState().room.roomDetails.roomId;\r\n  const localStream = getState().room.localStream;\r\n  if (localStream) {\r\n    localStream.getTracks().forEach((track) => track.stop());\r\n    dispatch(setLocalStream(null));\r\n  }\r\n\r\n  const screenSharingStream = getState().room.screenSharingStream;\r\n  if (screenSharingStream) {\r\n    screenSharingStream.getTracks().forEach((track) => track.stop());\r\n    dispatch(setScreenSharingStream(null));\r\n  }\r\n\r\n  dispatch(setRemoteStreams([]));\r\n  webRTCHandler.closeAllConnections();\r\n\r\n  socketConnection.leaveRoom({ roomId });\r\n  dispatch(setRoomDetails(null));\r\n  dispatch(setOpenRoom(false, false));\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}