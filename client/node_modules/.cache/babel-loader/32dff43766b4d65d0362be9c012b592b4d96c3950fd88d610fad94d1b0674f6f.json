{"ast":null,"code":"import io from \"socket.io-client\";\nimport { setSubjects } from \"../store/actions/subjectsActions\";\nimport store from \"../store/store\";\nimport * as roomHandler from \"./roomHandler\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nimport { socketOpen, socketClose } from \"../store/actions/socketActions\";\nlet socket = null;\nexport const connectWithSocketServer = userDetails => {\n  const jwtToken = userDetails.token;\n  // socket = io(\"https://realtime-lecturing-api.onrender.com\", {\n  //   auth: {\n  //     token: jwtToken,\n  //   },\n  // });\n  socket = io(\"http://localhost:8080\", {\n    auth: {\n      token: jwtToken\n    }\n  });\n  socket.on(\"connect\", () => {\n    console.log(\"succesfully connected with socket.io server\");\n    console.log(socket.id);\n    store.dispatch(socketOpen());\n  });\n  socket.on(\"subjects-list\", data => {\n    const {\n      subjects\n    } = data;\n    store.dispatch(setSubjects(subjects));\n  });\n  socket.on(\"create-room\", data => {\n    roomHandler.newRoomCreated(data);\n  });\n  socket.on(\"active-rooms\", data => {\n    roomHandler.updateActiveRooms(data);\n  });\n  socket.on(\"conn-prepare\", data => {\n    const {\n      connUserSocketId\n    } = data;\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);\n    socket.emit(\"initialze-connection\", {\n      connUserSocketId: connUserSocketId\n    });\n  });\n  socket.on(\"initialze-connection\", data => {\n    const {\n      connUserSocketId\n    } = data;\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\n  });\n  socket.on(\"conn-signal\", data => {\n    webRTCHandler.handleSignalingData(data);\n  });\n  socket.on(\"room-participant-left\", data => {\n    console.log(\"user left room\");\n    webRTCHandler.handleParticipantLeftRoom(data);\n  });\n  socket.on(\"disconnect\", () => {\n    console.log(\"dsfsafds\");\n    socketClose();\n  });\n};\nexport const createNewRoom = data => {\n  socket.emit(\"create-room\", data);\n};\nexport const joinRoom = data => {\n  socket.emit(\"join-room\", data);\n};\nexport const leaveRoom = data => {\n  socket.emit(\"leave-room\", data);\n};\nexport const signalPeerData = data => {\n  socket.emit(\"conn-signal\", data);\n};","map":{"version":3,"names":["io","setSubjects","store","roomHandler","webRTCHandler","socketOpen","socketClose","socket","connectWithSocketServer","userDetails","jwtToken","token","auth","on","console","log","id","dispatch","data","subjects","newRoomCreated","updateActiveRooms","connUserSocketId","prepareNewPeerConnection","emit","handleSignalingData","handleParticipantLeftRoom","createNewRoom","joinRoom","leaveRoom","signalPeerData"],"sources":["/media/alaa-eldeen/D/Real-Time-Lecturing/Real-Time-Lecturing-Client/client/src/realtimeCommunication/socketConnection.js"],"sourcesContent":["import io from \"socket.io-client\";\r\nimport { setSubjects } from \"../store/actions/subjectsActions\";\r\nimport store from \"../store/store\";\r\nimport * as roomHandler from \"./roomHandler\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\nimport { socketOpen, socketClose } from \"../store/actions/socketActions\";\r\nlet socket = null;\r\n\r\nexport const connectWithSocketServer = (userDetails) => {\r\n  const jwtToken = userDetails.token;\r\n  // socket = io(\"https://realtime-lecturing-api.onrender.com\", {\r\n  //   auth: {\r\n  //     token: jwtToken,\r\n  //   },\r\n  // });\r\n  socket = io(\"http://localhost:8080\", {\r\n    auth: {\r\n      token: jwtToken,\r\n    },\r\n  });\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"succesfully connected with socket.io server\");\r\n    console.log(socket.id);\r\n    store.dispatch(socketOpen());\r\n  });\r\n\r\n  socket.on(\"subjects-list\", (data) => {\r\n    const { subjects } = data;\r\n    store.dispatch(setSubjects(subjects));\r\n  });\r\n\r\n  socket.on(\"create-room\", (data) => {\r\n    roomHandler.newRoomCreated(data);\r\n  });\r\n\r\n  socket.on(\"active-rooms\", (data) => {\r\n    roomHandler.updateActiveRooms(data);\r\n  });\r\n\r\n  socket.on(\"conn-prepare\", (data) => {\r\n    const { connUserSocketId } = data;\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);\r\n    socket.emit(\"initialze-connection\", { connUserSocketId: connUserSocketId });\r\n  });\r\n\r\n  socket.on(\"initialze-connection\", (data) => {\r\n    const { connUserSocketId } = data;\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\r\n  });\r\n\r\n  socket.on(\"conn-signal\", (data) => {\r\n    webRTCHandler.handleSignalingData(data);\r\n  });\r\n\r\n  socket.on(\"room-participant-left\", (data) => {\r\n    console.log(\"user left room\");\r\n    webRTCHandler.handleParticipantLeftRoom(data);\r\n  });\r\n\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(\"dsfsafds\");\r\n    socketClose();\r\n  });\r\n};\r\n\r\nexport const createNewRoom = (data) => {\r\n  socket.emit(\"create-room\", data);\r\n};\r\n\r\nexport const joinRoom = (data) => {\r\n  socket.emit(\"join-room\", data);\r\n};\r\n\r\nexport const leaveRoom = (data) => {\r\n  socket.emit(\"leave-room\", data);\r\n};\r\n\r\nexport const signalPeerData = (data) => {\r\n  socket.emit(\"conn-signal\", data);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}