{"ast":null,"code":"import { useSelector } from \"react-redux\";\nimport { setOpenRoom, setRoomDetails, setActiveRooms, setLocalStream, setRemoteStreams, setScreenSharingStream } from \"../store/roomSlice\";\nimport * as socketConnection from \"./socketConnection\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nimport { getLocalStreamPreview } from \"./webRTCHandler\";\nexport const createNewRoom = subjectId => async dispatch => {\n  const successCallBackFunction = () => {\n    dispatch(setOpenRoom({\n      isUserInRoom: true,\n      isUserRoomCreator: false\n    }));\n    socketConnection.createNewRoom(subjectId);\n  };\n  await dispatch(getLocalStreamPreview(successCallBackFunction));\n};\nexport const newRoomCreated = data => async dispatch => {\n  const {\n    roomDetails\n  } = data;\n  dispatch(setRoomDetails(roomDetails));\n};\nexport const updateActiveRooms = data => (dispatch, getState) => {\n  var _getState$auth$userDe;\n  const {\n    activeRooms\n  } = data;\n\n  // const friends = store.getState().friends.friends;\n  const rooms = [];\n\n  // const userId = store.getState().auth.userDetails?._id;\n  const userName = (_getState$auth$userDe = getState().auth.userDetails) === null || _getState$auth$userDe === void 0 ? void 0 : _getState$auth$userDe.username;\n  activeRooms.forEach(room => {\n    rooms.push({\n      ...room,\n      creatorUsername: userName\n    });\n  });\n  dispatch(setActiveRooms(rooms));\n};\nexport const joinRoom = roomId => async dispatch => {\n  const successCallBackFunction = () => {\n    dispatch(setRoomDetails({\n      roomId\n    }));\n    dispatch(setOpenRoom({\n      isUserInRoom: false,\n      isUserRoomCreator: true\n    }));\n    socketConnection.joinRoom({\n      roomId\n    });\n  };\n  await dispatch(getLocalStreamPreview(successCallBackFunction));\n};\nexport const leaveRoom = () => {\n  var _s = $RefreshSig$();\n  return _s((dispatch, getState) => {\n    _s();\n    const roomId = getState().room.roomDetails.roomId;\n    const localStream = useSelector(state => state.room.localStream);\n    if (localStream) {\n      localStream.getTracks().forEach(track => track.stop());\n      dispatch(setLocalStream(null));\n    }\n    const screenSharingStream = useSelector(state => state.room.screenSharingStream);\n    if (screenSharingStream) {\n      screenSharingStream.getTracks().forEach(track => track.stop());\n      setScreenSharingStream(null);\n    }\n    dispatch(setRemoteStreams([]));\n    webRTCHandler.closeAllConnections();\n    socketConnection.leaveRoom({\n      roomId\n    });\n    dispatch(setRoomDetails(null));\n    dispatch(setOpenRoom({\n      isUserInRoom: false,\n      isUserRoomCreator: false\n    }));\n  }, \"NUNS1NaE6Ka0DFbfALNbGvp1Fyg=\", false, function () {\n    return [useSelector, useSelector];\n  });\n};","map":{"version":3,"names":["useSelector","setOpenRoom","setRoomDetails","setActiveRooms","setLocalStream","setRemoteStreams","setScreenSharingStream","socketConnection","webRTCHandler","getLocalStreamPreview","createNewRoom","subjectId","dispatch","successCallBackFunction","isUserInRoom","isUserRoomCreator","newRoomCreated","data","roomDetails","updateActiveRooms","getState","_getState$auth$userDe","activeRooms","rooms","userName","auth","userDetails","username","forEach","room","push","creatorUsername","joinRoom","roomId","leaveRoom","_s","$RefreshSig$","localStream","state","getTracks","track","stop","screenSharingStream","closeAllConnections"],"sources":["/home/abdelrahman/Realtime-project/client/Real-Time-Lecturing-Client/client/src/realtimeCommunication/roomHandler.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport {\r\n  setOpenRoom,\r\n  setRoomDetails,\r\n  setActiveRooms,\r\n  setLocalStream,\r\n  setRemoteStreams,\r\n  setScreenSharingStream,\r\n} from \"../store/roomSlice\";\r\nimport * as socketConnection from \"./socketConnection\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\nimport { getLocalStreamPreview } from \"./webRTCHandler\";\r\n\r\nexport const createNewRoom = (subjectId) => async (dispatch) => {\r\n  const successCallBackFunction = () => {\r\n    dispatch(setOpenRoom({ isUserInRoom: true, isUserRoomCreator: false }));\r\n    socketConnection.createNewRoom(subjectId);\r\n  };\r\n\r\n  await dispatch(getLocalStreamPreview(successCallBackFunction));\r\n};\r\n\r\nexport const newRoomCreated = (data) => async (dispatch) => {\r\n  const { roomDetails } = data;\r\n  dispatch(setRoomDetails(roomDetails));\r\n};\r\n\r\nexport const updateActiveRooms = (data) => (dispatch, getState) => {\r\n  const { activeRooms } = data;\r\n\r\n  // const friends = store.getState().friends.friends;\r\n  const rooms = [];\r\n\r\n  // const userId = store.getState().auth.userDetails?._id;\r\n  const userName = getState().auth.userDetails?.username;\r\n\r\n  activeRooms.forEach((room) => {\r\n    rooms.push({ ...room, creatorUsername: userName });\r\n  });\r\n\r\n  dispatch(setActiveRooms(rooms));\r\n};\r\n\r\nexport const joinRoom = (roomId) => async (dispatch) => {\r\n  const successCallBackFunction = () => {\r\n    dispatch(setRoomDetails({ roomId }));\r\n    dispatch(setOpenRoom({ isUserInRoom: false, isUserRoomCreator: true }));\r\n    socketConnection.joinRoom({ roomId });\r\n  };\r\n  await dispatch(getLocalStreamPreview(successCallBackFunction));\r\n};\r\n\r\nexport const leaveRoom = () => (dispatch, getState) => {\r\n  const roomId = getState().room.roomDetails.roomId;\r\n\r\n  const localStream = useSelector((state) => state.room.localStream);\r\n  if (localStream) {\r\n    localStream.getTracks().forEach((track) => track.stop());\r\n    dispatch(setLocalStream(null));\r\n  }\r\n\r\n  const screenSharingStream = useSelector(\r\n    (state) => state.room.screenSharingStream\r\n  );\r\n  if (screenSharingStream) {\r\n    screenSharingStream.getTracks().forEach((track) => track.stop());\r\n    setScreenSharingStream(null);\r\n  }\r\n\r\n  dispatch(setRemoteStreams([]));\r\n  webRTCHandler.closeAllConnections();\r\n\r\n  socketConnection.leaveRoom({ roomId });\r\n  dispatch(setRoomDetails(null));\r\n  dispatch(setOpenRoom({ isUserInRoom: false, isUserRoomCreator: false }));\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}