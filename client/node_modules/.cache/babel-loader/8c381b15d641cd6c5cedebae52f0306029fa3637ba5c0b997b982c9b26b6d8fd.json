{"ast":null,"code":"import store from \"../store/store\";\nimport { setOpenRoom, setRoomDetails, setActiveRooms, setLocalStream, setRemoteStreams, setScreenSharingStream } from \"../store/actions/roomActions\";\nimport * as socketConnection from \"./socketConnection\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nexport const createNewRoom = subjectId => {\n  const successCallBackFunction = () => {\n    store.dispatch(setOpenRoom(true, true));\n    socketConnection.createNewRoom({\n      subjectId\n    });\n  };\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\n};\nexport const newRoomCreated = data => {\n  const {\n    roomDetails\n  } = data;\n  store.dispatch(setRoomDetails(roomDetails));\n};\nexport const updateActiveRooms = data => {\n  var _store$getState$auth$, _store$getState$auth$2;\n  const {\n    activeRooms\n  } = data;\n  const rooms = [];\n  const userId = (_store$getState$auth$ = store.getState().auth.userDetails) === null || _store$getState$auth$ === void 0 ? void 0 : _store$getState$auth$._id;\n  const userName = (_store$getState$auth$2 = store.getState().auth.userDetails) === null || _store$getState$auth$2 === void 0 ? void 0 : _store$getState$auth$2.username;\n  activeRooms.forEach(room => {\n    rooms.push({\n      ...room,\n      creatorUsername: userName\n    });\n  });\n\n  // Set active rooms in the state\n  store.dispatch(setActiveRooms(rooms));\n\n  // Check if there are no active rooms\n  if (activeRooms.length === 0) {\n    // No active rooms, delete the room\n    deleteRoom();\n  }\n};\n\n// Add this function to delete the room\nconst deleteRoom = () => {\n  const roomId = store.getState().room.roomDetails.roomId;\n\n  // Close connections and other cleanup logic\n  webRTCHandler.closeAllConnections();\n\n  // Leave the room\n  socketConnection.leaveRoom({\n    roomId\n  });\n\n  // Remove room details from the state\n  store.dispatch(setRoomDetails(null));\n\n  // Close the connectors\n  store.dispatch(setOpenRoom(false, false));\n};\nexport const joinRoom = roomId => {\n  const successCallBackFunction = () => {\n    store.dispatch(setRoomDetails({\n      roomId\n    }));\n    store.dispatch(setOpenRoom(false, true));\n    socketConnection.joinRoom({\n      roomId\n    });\n  };\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\n};\nexport const leaveRoom = () => {\n  const roomId = store.getState().room.roomDetails.roomId;\n  const localStream = store.getState().room.localStream;\n  if (localStream) {\n    localStream.getTracks().forEach(track => track.stop());\n    store.dispatch(setLocalStream(null));\n  }\n  const screenSharingStream = store.getState().room.screenSharingStream;\n  if (screenSharingStream) {\n    screenSharingStream.getTracks().forEach(track => track.stop());\n    store.dispatch(setScreenSharingStream(null));\n  }\n  store.dispatch(setRemoteStreams([]));\n  webRTCHandler.closeAllConnections();\n  socketConnection.leaveRoom({\n    roomId\n  });\n  store.dispatch(setRoomDetails(null));\n  store.dispatch(setOpenRoom(false, false));\n};","map":{"version":3,"names":["store","setOpenRoom","setRoomDetails","setActiveRooms","setLocalStream","setRemoteStreams","setScreenSharingStream","socketConnection","webRTCHandler","createNewRoom","subjectId","successCallBackFunction","dispatch","getLocalStreamPreview","newRoomCreated","data","roomDetails","updateActiveRooms","_store$getState$auth$","_store$getState$auth$2","activeRooms","rooms","userId","getState","auth","userDetails","_id","userName","username","forEach","room","push","creatorUsername","length","deleteRoom","roomId","closeAllConnections","leaveRoom","joinRoom","localStream","getTracks","track","stop","screenSharingStream"],"sources":["/home/abdelrahman/Documents/Realtime-project/client/Real-Time-Lecturing-Client/client/src/realtimeCommunication/roomHandler.js"],"sourcesContent":["import store from \"../store/store\";\r\nimport {\r\n  setOpenRoom,\r\n  setRoomDetails,\r\n  setActiveRooms,\r\n  setLocalStream,\r\n  setRemoteStreams,\r\n  setScreenSharingStream,\r\n} from \"../store/actions/roomActions\";\r\nimport * as socketConnection from \"./socketConnection\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\n\r\nexport const createNewRoom = (subjectId) => {\r\n  const successCallBackFunction = () => {\r\n    store.dispatch(setOpenRoom(true, true));\r\n    socketConnection.createNewRoom({ subjectId });\r\n  };\r\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\r\n};\r\n\r\nexport const newRoomCreated = (data) => {\r\n  const { roomDetails } = data;\r\n  store.dispatch(setRoomDetails(roomDetails));\r\n};\r\n\r\nexport const updateActiveRooms = (data) => {\r\n  const { activeRooms } = data;\r\n\r\n  const rooms = [];\r\n  const userId = store.getState().auth.userDetails?._id;\r\n  const userName = store.getState().auth.userDetails?.username;\r\n\r\n  activeRooms.forEach((room) => {\r\n    rooms.push({ ...room, creatorUsername: userName });\r\n  });\r\n\r\n  // Set active rooms in the state\r\n  store.dispatch(setActiveRooms(rooms));\r\n\r\n  // Check if there are no active rooms\r\n  if (activeRooms.length === 0) {\r\n    // No active rooms, delete the room\r\n    deleteRoom();\r\n  }\r\n};\r\n\r\n// Add this function to delete the room\r\nconst deleteRoom = () => {\r\n  const roomId = store.getState().room.roomDetails.roomId;\r\n\r\n  // Close connections and other cleanup logic\r\n  webRTCHandler.closeAllConnections();\r\n\r\n  // Leave the room\r\n  socketConnection.leaveRoom({ roomId });\r\n\r\n  // Remove room details from the state\r\n  store.dispatch(setRoomDetails(null));\r\n\r\n  // Close the connectors\r\n  store.dispatch(setOpenRoom(false, false));\r\n};\r\n\r\nexport const joinRoom = (roomId) => {\r\n  const successCallBackFunction = () => {\r\n    store.dispatch(setRoomDetails({ roomId }));\r\n    store.dispatch(setOpenRoom(false, true));\r\n    socketConnection.joinRoom({ roomId });\r\n  };\r\n  webRTCHandler.getLocalStreamPreview(successCallBackFunction);\r\n};\r\n\r\nexport const leaveRoom = () => {\r\n  const roomId = store.getState().room.roomDetails.roomId;\r\n\r\n  const localStream = store.getState().room.localStream;\r\n  if (localStream) {\r\n    localStream.getTracks().forEach((track) => track.stop());\r\n    store.dispatch(setLocalStream(null));\r\n  }\r\n\r\n  const screenSharingStream = store.getState().room.screenSharingStream;\r\n  if (screenSharingStream) {\r\n    screenSharingStream.getTracks().forEach((track) => track.stop());\r\n    store.dispatch(setScreenSharingStream(null));\r\n  }\r\n\r\n  store.dispatch(setRemoteStreams([]));\r\n  webRTCHandler.closeAllConnections();\r\n\r\n  socketConnection.leaveRoom({ roomId });\r\n  store.dispatch(setRoomDetails(null));\r\n  store.dispatch(setOpenRoom(false, false));\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}