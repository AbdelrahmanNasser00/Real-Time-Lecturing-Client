{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport io from \"socket.io-client\";\nimport * as roomHandler from \"./roomHandler\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nimport { setSubjects } from \"../store/subjectsSlice\";\nconst initialState = {\n  isConnected: false\n};\nlet socket = null;\nexport const connectWithSocketServer = createAsyncThunk(\"socket/connectWithSocketServer\", async (userDetails, {\n  dispatch\n}) => {\n  const jwtToken = userDetails.token;\n  console.log(`jwtToken ${jwtToken}`);\n  const socket = io(\"http://localhost:8080\", {\n    auth: {\n      token: jwtToken\n    }\n  });\n  socket.on(\"connect\", () => {\n    console.log(\"succesfully connected with socket.io server\");\n    console.log(socket.id);\n    dispatch(socketConnected());\n  });\n  socket.on(\"subjects-list\", data => {\n    const {\n      subjects\n    } = data;\n    console.log(\"subjects came\", subjects);\n    dispatch(setSubjects(subjects));\n  });\n\n  // Add other socket event listeners here\n\n  socket.on(\"disconnect\", () => {\n    dispatch(socketDisconnected());\n  });\n});\nexport const createNewRoom = createAsyncThunk(\"socket/createNewRoom\", async data => {\n  console.log(\"create-room in socket connection\", data);\n  socket.emit(\"create-room\", data);\n});\nexport const joinRoom = createAsyncThunk(\"socket/joinRoom\", async data => {\n  socket.emit(\"join-room\", data);\n});\nexport const leaveRoom = createAsyncThunk(\"socket/leaveRoom\", async data => {\n  socket.emit(\"leave-room\", data);\n});\nexport const signalPeerData = createAsyncThunk(\"socket/signalPeerData\", async data => {\n  socket.emit(\"conn-signal\", data);\n});\nconst socketSlice = createSlice({\n  name: \"socket\",\n  initialState,\n  reducers: {\n    socketConnected(state) {\n      state.isConnected = true;\n    },\n    socketDisconnected(state) {\n      state.isConnected = false;\n    }\n  }\n});\nexport const {\n  socketConnected,\n  socketDisconnected\n} = socketSlice.actions;\nexport default socketSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","io","roomHandler","webRTCHandler","setSubjects","initialState","isConnected","socket","connectWithSocketServer","userDetails","dispatch","jwtToken","token","console","log","auth","on","id","socketConnected","data","subjects","socketDisconnected","createNewRoom","emit","joinRoom","leaveRoom","signalPeerData","socketSlice","name","reducers","state","actions","reducer"],"sources":["/media/abdelrahman/7E84C90484C8BFBF/Abdo/faculty/project/Realtime-project/client/Real-Time-Lecturing-Client/client/src/realtimeCommunication/socketConnection.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport io from \"socket.io-client\";\r\nimport * as roomHandler from \"./roomHandler\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\nimport { setSubjects } from \"../store/subjectsSlice\";\r\n\r\nconst initialState = {\r\n  isConnected: false,\r\n};\r\nlet socket = null;\r\n\r\nexport const connectWithSocketServer = createAsyncThunk(\r\n  \"socket/connectWithSocketServer\",\r\n  async (userDetails, { dispatch }) => {\r\n    const jwtToken = userDetails.token;\r\n    console.log(`jwtToken ${jwtToken}`);\r\n    const socket = io(\"http://localhost:8080\", {\r\n      auth: {\r\n        token: jwtToken,\r\n      },\r\n    });\r\n\r\n    socket.on(\"connect\", () => {\r\n      console.log(\"succesfully connected with socket.io server\");\r\n      console.log(socket.id);\r\n      dispatch(socketConnected());\r\n    });\r\n\r\n    socket.on(\"subjects-list\", (data) => {\r\n      const { subjects } = data;\r\n      console.log(\"subjects came\", subjects);\r\n      dispatch(setSubjects(subjects));\r\n    });\r\n\r\n    // Add other socket event listeners here\r\n\r\n    socket.on(\"disconnect\", () => {\r\n      dispatch(socketDisconnected());\r\n    });\r\n  }\r\n);\r\n\r\nexport const createNewRoom = createAsyncThunk(\r\n  \"socket/createNewRoom\",\r\n  async (data) => {\r\n    console.log(\"create-room in socket connection\", data);\r\n    socket.emit(\"create-room\", data);\r\n  }\r\n);\r\n\r\nexport const joinRoom = createAsyncThunk(\"socket/joinRoom\", async (data) => {\r\n  socket.emit(\"join-room\", data);\r\n});\r\n\r\nexport const leaveRoom = createAsyncThunk(\"socket/leaveRoom\", async (data) => {\r\n  socket.emit(\"leave-room\", data);\r\n});\r\n\r\nexport const signalPeerData = createAsyncThunk(\r\n  \"socket/signalPeerData\",\r\n  async (data) => {\r\n    socket.emit(\"conn-signal\", data);\r\n  }\r\n);\r\n\r\nconst socketSlice = createSlice({\r\n  name: \"socket\",\r\n  initialState,\r\n  reducers: {\r\n    socketConnected(state) {\r\n      state.isConnected = true;\r\n    },\r\n    socketDisconnected(state) {\r\n      state.isConnected = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { socketConnected, socketDisconnected } = socketSlice.actions;\r\n\r\nexport default socketSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAO,KAAKC,WAAW,MAAM,eAAe;AAC5C,OAAO,KAAKC,aAAa,MAAM,iBAAiB;AAChD,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE;AACf,CAAC;AACD,IAAIC,MAAM,GAAG,IAAI;AAEjB,OAAO,MAAMC,uBAAuB,GAAGR,gBAAgB,CACrD,gCAAgC,EAChC,OAAOS,WAAW,EAAE;EAAEC;AAAS,CAAC,KAAK;EACnC,MAAMC,QAAQ,GAAGF,WAAW,CAACG,KAAK;EAClCC,OAAO,CAACC,GAAG,CAAE,YAAWH,QAAS,EAAC,CAAC;EACnC,MAAMJ,MAAM,GAAGN,EAAE,CAAC,uBAAuB,EAAE;IACzCc,IAAI,EAAE;MACJH,KAAK,EAAED;IACT;EACF,CAAC,CAAC;EAEFJ,MAAM,CAACS,EAAE,CAAC,SAAS,EAAE,MAAM;IACzBH,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC1DD,OAAO,CAACC,GAAG,CAACP,MAAM,CAACU,EAAE,CAAC;IACtBP,QAAQ,CAACQ,eAAe,CAAC,CAAC,CAAC;EAC7B,CAAC,CAAC;EAEFX,MAAM,CAACS,EAAE,CAAC,eAAe,EAAGG,IAAI,IAAK;IACnC,MAAM;MAAEC;IAAS,CAAC,GAAGD,IAAI;IACzBN,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEM,QAAQ,CAAC;IACtCV,QAAQ,CAACN,WAAW,CAACgB,QAAQ,CAAC,CAAC;EACjC,CAAC,CAAC;;EAEF;;EAEAb,MAAM,CAACS,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BN,QAAQ,CAACW,kBAAkB,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC;AACJ,CACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGtB,gBAAgB,CAC3C,sBAAsB,EACtB,MAAOmB,IAAI,IAAK;EACdN,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEK,IAAI,CAAC;EACrDZ,MAAM,CAACgB,IAAI,CAAC,aAAa,EAAEJ,IAAI,CAAC;AAClC,CACF,CAAC;AAED,OAAO,MAAMK,QAAQ,GAAGxB,gBAAgB,CAAC,iBAAiB,EAAE,MAAOmB,IAAI,IAAK;EAC1EZ,MAAM,CAACgB,IAAI,CAAC,WAAW,EAAEJ,IAAI,CAAC;AAChC,CAAC,CAAC;AAEF,OAAO,MAAMM,SAAS,GAAGzB,gBAAgB,CAAC,kBAAkB,EAAE,MAAOmB,IAAI,IAAK;EAC5EZ,MAAM,CAACgB,IAAI,CAAC,YAAY,EAAEJ,IAAI,CAAC;AACjC,CAAC,CAAC;AAEF,OAAO,MAAMO,cAAc,GAAG1B,gBAAgB,CAC5C,uBAAuB,EACvB,MAAOmB,IAAI,IAAK;EACdZ,MAAM,CAACgB,IAAI,CAAC,aAAa,EAAEJ,IAAI,CAAC;AAClC,CACF,CAAC;AAED,MAAMQ,WAAW,GAAG5B,WAAW,CAAC;EAC9B6B,IAAI,EAAE,QAAQ;EACdvB,YAAY;EACZwB,QAAQ,EAAE;IACRX,eAAeA,CAACY,KAAK,EAAE;MACrBA,KAAK,CAACxB,WAAW,GAAG,IAAI;IAC1B,CAAC;IACDe,kBAAkBA,CAACS,KAAK,EAAE;MACxBA,KAAK,CAACxB,WAAW,GAAG,KAAK;IAC3B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEY,eAAe;EAAEG;AAAmB,CAAC,GAAGM,WAAW,CAACI,OAAO;AAE1E,eAAeJ,WAAW,CAACK,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}