{"ast":null,"code":"import store from\"../store/store\";import{setLocalStream,setRemoteStreams}from\"../store/actions/roomActions\";import Peer from\"simple-peer\";import*as socketConnection from\"./socketConnection\";const getConfiguration=()=>{const turnIceServers=null;if(turnIceServers){// TODO use TURN server credentials\n}else{console.warn(\"Using only STUN server\");return{iceServers:[{urls:\"stun:stun.l.google.com:19302\"}]};}};export const getLocalStreamPreview=callbackFunc=>{const constraints={video:true,audio:true};navigator.mediaDevices.getUserMedia(constraints).then(stream=>{store.dispatch(setLocalStream(stream));callbackFunc();}).catch(err=>{console.log(err);console.log(\"Cannot get an access to local stream\");});};let peers={};export const prepareNewPeerConnection=(connUserSocketId,isInitiator)=>{const localStream=store.getState().room.localStream;if(isInitiator){console.log(\"preparing new peer connection as initiator\");}else{console.log(\"preparing new peer connection as not initiator\");}peers[connUserSocketId]=new Peer({initiator:isInitiator,config:getConfiguration(),stream:localStream});peers[connUserSocketId].on(\"signal\",data=>{const signalData={signal:data,connUserSocketId:connUserSocketId};socketConnection.signalPeerData(signalData);});peers[connUserSocketId].on(\"stream\",remoteStream=>{// TODO\n// add new remote stream to our server store\nconsole.log(\"remote stream came from other user\");console.log(\"direct connection has been established\");remoteStream.connUserSocketId=connUserSocketId;addNewRemoteStream(remoteStream);});};export const handleSignalingData=data=>{const{connUserSocketId,signal}=data;if(peers[connUserSocketId]){peers[connUserSocketId].signal(signal);}};const addNewRemoteStream=remoteStream=>{const remoteStreams=store.getState().room.remoteStreams;const newRemoteStreams=[...remoteStreams,remoteStream];store.dispatch(setRemoteStreams(newRemoteStreams));};export const closeAllConnections=()=>{Object.entries(peers).forEach(mappedObject=>{const connUserSocketId=mappedObject[0];if(peers[connUserSocketId]){peers[connUserSocketId].destroy();delete peers[connUserSocketId];}});};export const handleParticipantLeftRoom=data=>{const{connUserSocketId}=data;if(peers[connUserSocketId]){peers[connUserSocketId].destroy();delete peers[connUserSocketId];}const remoteStreams=store.getState().room.remoteStreams;const newRemoteStreams=remoteStreams.filter(remoteStream=>remoteStream.connUserSocketId!==connUserSocketId);store.dispatch(setRemoteStreams(newRemoteStreams));};export const switchOutgoingTracks=stream=>{for(let socket_id in peers){for(let index in peers[socket_id].streams[0].getTracks()){for(let index2 in stream.getTracks()){if(peers[socket_id].streams[0].getTracks()[index].kind===stream.getTracks()[index2].kind){peers[socket_id].replaceTrack(peers[socket_id].streams[0].getTracks()[index],stream.getTracks()[index2],peers[socket_id].streams[0]);break;}}}}};","map":{"version":3,"names":["store","setLocalStream","setRemoteStreams","Peer","socketConnection","getConfiguration","turnIceServers","console","warn","iceServers","urls","getLocalStreamPreview","callbackFunc","constraints","video","audio","navigator","mediaDevices","getUserMedia","then","stream","dispatch","catch","err","log","peers","prepareNewPeerConnection","connUserSocketId","isInitiator","localStream","getState","room","initiator","config","on","data","signalData","signal","signalPeerData","remoteStream","addNewRemoteStream","handleSignalingData","remoteStreams","newRemoteStreams","closeAllConnections","Object","entries","forEach","mappedObject","destroy","handleParticipantLeftRoom","filter","switchOutgoingTracks","socket_id","index","streams","getTracks","index2","kind","replaceTrack"],"sources":["/home/abdelrahman/Documents/client-deployment-2/Real-Time-Lecturing-Client/client/src/realtimeCommunication/webRTCHandler.js"],"sourcesContent":["import store from \"../store/store\";\r\nimport { setLocalStream, setRemoteStreams } from \"../store/actions/roomActions\";\r\nimport Peer from \"simple-peer\";\r\nimport * as socketConnection from \"./socketConnection\";\r\n\r\nconst getConfiguration = () => {\r\n  const turnIceServers = null;\r\n\r\n  if (turnIceServers) {\r\n    // TODO use TURN server credentials\r\n  } else {\r\n    console.warn(\"Using only STUN server\");\r\n    return {\r\n      iceServers: [\r\n        {\r\n          urls: \"stun:stun.l.google.com:19302\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n};\r\n\r\nexport const getLocalStreamPreview = (callbackFunc) => {\r\n  const constraints = {\r\n    video: true,\r\n    audio: true,\r\n  };\r\n\r\n  navigator.mediaDevices\r\n    .getUserMedia(constraints)\r\n    .then((stream) => {\r\n      store.dispatch(setLocalStream(stream));\r\n      callbackFunc();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      console.log(\"Cannot get an access to local stream\");\r\n    });\r\n};\r\n\r\nlet peers = {};\r\n\r\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {\r\n  const localStream = store.getState().room.localStream;\r\n\r\n  if (isInitiator) {\r\n    console.log(\"preparing new peer connection as initiator\");\r\n  } else {\r\n    console.log(\"preparing new peer connection as not initiator\");\r\n  }\r\n\r\n  peers[connUserSocketId] = new Peer({\r\n    initiator: isInitiator,\r\n    config: getConfiguration(),\r\n    stream: localStream,\r\n  });\r\n\r\n  peers[connUserSocketId].on(\"signal\", (data) => {\r\n    const signalData = {\r\n      signal: data,\r\n      connUserSocketId: connUserSocketId,\r\n    };\r\n\r\n    socketConnection.signalPeerData(signalData);\r\n  });\r\n\r\n  peers[connUserSocketId].on(\"stream\", (remoteStream) => {\r\n    // TODO\r\n    // add new remote stream to our server store\r\n    console.log(\"remote stream came from other user\");\r\n    console.log(\"direct connection has been established\");\r\n    remoteStream.connUserSocketId = connUserSocketId;\r\n    addNewRemoteStream(remoteStream);\r\n  });\r\n};\r\n\r\nexport const handleSignalingData = (data) => {\r\n  const { connUserSocketId, signal } = data;\r\n\r\n  if (peers[connUserSocketId]) {\r\n    peers[connUserSocketId].signal(signal);\r\n  }\r\n};\r\n\r\nconst addNewRemoteStream = (remoteStream) => {\r\n  const remoteStreams = store.getState().room.remoteStreams;\r\n  const newRemoteStreams = [...remoteStreams, remoteStream];\r\n\r\n  store.dispatch(setRemoteStreams(newRemoteStreams));\r\n};\r\n\r\nexport const closeAllConnections = () => {\r\n  Object.entries(peers).forEach((mappedObject) => {\r\n    const connUserSocketId = mappedObject[0];\r\n    if (peers[connUserSocketId]) {\r\n      peers[connUserSocketId].destroy();\r\n      delete peers[connUserSocketId];\r\n    }\r\n  });\r\n};\r\n\r\nexport const handleParticipantLeftRoom = (data) => {\r\n  const { connUserSocketId } = data;\r\n\r\n  if (peers[connUserSocketId]) {\r\n    peers[connUserSocketId].destroy();\r\n    delete peers[connUserSocketId];\r\n  }\r\n\r\n  const remoteStreams = store.getState().room.remoteStreams;\r\n\r\n  const newRemoteStreams = remoteStreams.filter(\r\n    (remoteStream) => remoteStream.connUserSocketId !== connUserSocketId\r\n  );\r\n\r\n  store.dispatch(setRemoteStreams(newRemoteStreams));\r\n};\r\n\r\nexport const switchOutgoingTracks = (stream) => {\r\n  for (let socket_id in peers) {\r\n    for (let index in peers[socket_id].streams[0].getTracks()) {\r\n      for (let index2 in stream.getTracks()) {\r\n        if (\r\n          peers[socket_id].streams[0].getTracks()[index].kind ===\r\n          stream.getTracks()[index2].kind\r\n        ) {\r\n          peers[socket_id].replaceTrack(\r\n            peers[socket_id].streams[0].getTracks()[index],\r\n            stream.getTracks()[index2],\r\n            peers[socket_id].streams[0]\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}